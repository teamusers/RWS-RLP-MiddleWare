// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth": {
            "post": {
                "description": "Validates AppID header and HMAC signature, then returns a JWT access token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Generate authentication token",
                "parameters": [
                    {
                        "type": "string",
                        "default": "app1234",
                        "description": "Client system AppID",
                        "name": "AppID",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Authentication request payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.AuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT access token returned successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.AuthSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Malformed JSON in request body",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "HMAC signature mismatch",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/archive/{external_id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates a user's profile fields (non‐zero values in the JSON body).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user external ID",
                        "name": "external_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Profile fields to update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdateUserProfile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update successful",
                        "schema": {
                            "$ref": "#/definitions/responses.UpdateUserSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON request body",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "existing user not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/gr": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Checks if a GR member ID is already registered.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Verify GR member existence",
                "parameters": [
                    {
                        "description": "GR registration check payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.VerifyGrUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "gr profile found",
                        "schema": {
                            "$ref": "#/definitions/responses.GrExistenceSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON request body",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/gr-cms": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Checks if a GR CMS member email is in the system and caches their profile for follow‑up.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Verify and cache GR CMS member",
                "parameters": [
                    {
                        "description": "GR CMS register payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.VerifyGrCmsUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "existing user not found",
                        "schema": {
                            "$ref": "#/definitions/responses.GrCmsExistenceSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON request body",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email already registered",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/gr-reg/{reg_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a temporarily cached GR CMS profile by registration ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get cached GR CMS profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Registration ID",
                        "name": "reg_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cached profile found",
                        "schema": {
                            "$ref": "#/definitions/responses.CachedGrCmsSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Registration ID is required",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Cached profile not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Validates user email, generates an OTP, emails it, and returns the OTP details plus a login session token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Start login flow via email",
                "parameters": [
                    {
                        "description": "Login request payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email found; OTP generated and sent; login session token returned",
                        "schema": {
                            "$ref": "#/definitions/responses.LoginSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON request body",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "existing user not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/pin": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates the burn PIN for a given email address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user burn PIN",
                "parameters": [
                    {
                        "description": "Email + new burn PIN",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdateBurnPin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "update successful",
                        "schema": {
                            "$ref": "#/definitions/responses.UpdateUserSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON request body",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Registers a new user record in the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create new user",
                "parameters": [
                    {
                        "description": "User create payload",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.RegisterUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.CreateSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON request body",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/register/verify": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Checks if an email is already registered; if not, sends an OTP for signup.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Verify email for registration",
                "parameters": [
                    {
                        "description": "Registration request payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.VerifyUserExistence"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "existing user not found",
                        "schema": {
                            "$ref": "#/definitions/responses.RegisterSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON request body",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "existing user found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/update/{external_id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates a user's profile fields (non‐zero values in the JSON body).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user external ID",
                        "name": "external_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Profile fields to update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdateUserProfile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update successful",
                        "schema": {
                            "$ref": "#/definitions/responses.UpdateUserSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON request body",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "existing user not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/{external_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves the profile (including phone numbers) for a given user by external_id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user external ID",
                        "name": "external_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user found",
                        "schema": {
                            "$ref": "#/definitions/responses.GetUserSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid or missing external_id path parameter",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "existing user not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.GrProfile": {
            "type": "object",
            "properties": {
                "class": {
                    "description": "User’s membership class\nexample: premium",
                    "type": "string",
                    "example": "premium"
                },
                "id": {
                    "description": "Unique identifier for the profile\nexample: 123e4567-e89b-12d3-a456-426614174000",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "pin": {
                    "description": "Four-digit PIN for quick auth\nexample: 1234",
                    "type": "string",
                    "example": "1234"
                }
            }
        },
        "model.Identifier": {
            "type": "object",
            "properties": {
                "external_id": {
                    "description": "The external identifier value\nexample: ABC123",
                    "type": "string",
                    "example": "ABC123"
                },
                "external_id_type": {
                    "description": "Type of the external identifier\nexample: loyalty",
                    "type": "string",
                    "example": "loyalty"
                }
            }
        },
        "model.Otp": {
            "type": "object",
            "properties": {
                "otp": {
                    "description": "Otp is the one‑time password sent to the user.\nexample: \"123456\"",
                    "type": "string",
                    "example": "123456"
                },
                "otp_expiry": {
                    "description": "OtpExpiry is the Unix timestamp (seconds since epoch) when the OTP expires.\nexample: 1744176000",
                    "type": "integer",
                    "example": 1744176000
                }
            }
        },
        "model.PhoneNumber": {
            "type": "object",
            "properties": {
                "phone_number": {
                    "type": "string"
                },
                "phone_type": {
                    "type": "string"
                },
                "preference_flags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "verified_ownership": {
                    "type": "boolean"
                }
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "available_points": {
                    "description": "Loyalty points available\nexample: 1200",
                    "type": "integer",
                    "example": 1200
                },
                "country": {
                    "description": "ISO 3166-1 alpha-2 country code\nexample: SG",
                    "type": "string",
                    "example": "SG"
                },
                "created_at": {
                    "description": "Timestamp when the record was created (RFC3339)\nexample: 2025-04-01T08:30:00Z",
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "dob": {
                    "description": "Date of birth in YYYY-MM-DD\nexample: 1990-05-15",
                    "type": "string",
                    "example": "1990-05-15"
                },
                "email": {
                    "description": "Email address of the user\nexample: john.doe@example.com",
                    "type": "string",
                    "example": "john.doe@example.com"
                },
                "first_name": {
                    "description": "User's first name\nexample: John",
                    "type": "string",
                    "example": "John"
                },
                "gr_profile": {
                    "description": "GR Profile-unique information. Only used within LBE.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.GrProfile"
                        }
                    ]
                },
                "identifiers": {
                    "description": "List of external identifiers for the user\nexample: [{\"external_id\":\"ABC123\",\"external_id_type\":\"loyalty\"}]",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Identifier"
                    }
                },
                "last_name": {
                    "description": "User's last name\nexample: Doe",
                    "type": "string",
                    "example": "Doe"
                },
                "phone_numbers": {
                    "description": "Mobile phone number array\nexample: [{\"phone_number\":\"87654321\"}]",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.PhoneNumber"
                    }
                },
                "registered_at": {
                    "description": "Timestamp when the user registered\nexample: 2025-04-01T08:30:00Z",
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "suspended": {
                    "description": "Whether the account is suspended\nexample: false",
                    "type": "boolean",
                    "example": false
                },
                "tier": {
                    "description": "Loyalty tier name\nexample: gold",
                    "type": "string",
                    "example": "gold"
                },
                "updated_at": {
                    "description": "Timestamp of last update\nexample: 2025-05-05T14:00:00Z",
                    "type": "string",
                    "example": "2006-01-02 15:04:05"
                },
                "user_profile": {
                    "description": "Additional profile details",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.UserProfile"
                        }
                    ]
                }
            }
        },
        "model.UserProfile": {
            "type": "object",
            "properties": {
                "active_status": {
                    "description": "Active status code (e.g., 1=active, 0=inactive)\nexample: 1",
                    "type": "integer",
                    "example": 1
                },
                "burn_pin": {
                    "description": "Secret Key for burn transaction\nexample: 1111",
                    "type": "string",
                    "example": "1111"
                },
                "country_code": {
                    "description": "Country code for mobile number\nexample: +65",
                    "type": "string",
                    "example": "+65"
                },
                "employee_number": {
                    "description": "Employee Number for RWS employees only, otherwise empty\nexample: 1111",
                    "type": "string",
                    "example": "1111"
                },
                "language_preference": {
                    "description": "Preferred language (ISO 639-1)\nexample: en",
                    "type": "string",
                    "example": "en"
                },
                "market_pref_email": {
                    "description": "Whether the user opts in to email marketing\nexample: false",
                    "type": "boolean",
                    "example": false
                },
                "market_pref_mobile": {
                    "description": "Whether the user opts in to SMS/mobile marketing\nexample: true",
                    "type": "boolean",
                    "example": true
                },
                "market_pref_push": {
                    "description": "Whether the user opts in to push notifications\nexample: true",
                    "type": "boolean",
                    "example": true
                },
                "previous_email": {
                    "description": "Previously used email\nexample: john.old@example.com",
                    "type": "string",
                    "example": "john.old@example.com"
                }
            }
        },
        "requests.AuthRequest": {
            "type": "object",
            "required": [
                "nonce",
                "signature",
                "timestamp"
            ],
            "properties": {
                "nonce": {
                    "description": "A unique random string for each request to prevent replay attacks.",
                    "type": "string",
                    "example": "API"
                },
                "signature": {
                    "description": "HMAC-SHA256 signature of \"appID|timestamp|nonce\" hex-encoded.\nComputed by concatenating the appID, timestamp, and nonce to form a base string,\nthen applying HMAC-SHA256 with the secret key and hex-encoding the resulting digest.",
                    "type": "string",
                    "example": "1558850cb1b48e826197c48d6a14c5f3bf4b644bcb0065ceb0b07978296116bc"
                },
                "timestamp": {
                    "description": "Unix timestamp (seconds since epoch) when the request was generated.",
                    "type": "string",
                    "example": "1744075148"
                }
            }
        },
        "requests.Login": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "Email address of the user attempting to log in",
                    "type": "string",
                    "example": "user@example.com"
                }
            }
        },
        "requests.RegisterUser": {
            "type": "object",
            "properties": {
                "reg_id": {
                    "type": "integer",
                    "example": 123456
                },
                "sign_up_type": {
                    "description": "GrProfile  model.GrProfile ` + "`" + `json:\"gr_profile\"` + "`" + `",
                    "type": "string",
                    "example": "NEW"
                },
                "user": {
                    "$ref": "#/definitions/model.User"
                }
            }
        },
        "requests.UpdateBurnPin": {
            "type": "object",
            "required": [
                "burn_pin",
                "email"
            ],
            "properties": {
                "burn_pin": {
                    "description": "BurnPin is the new numeric PIN to set.",
                    "type": "integer",
                    "example": 4321
                },
                "email": {
                    "description": "Email of the user whose burn PIN is being updated.",
                    "type": "string",
                    "example": "user@example.com"
                }
            }
        },
        "requests.UpdateUserProfile": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/model.User"
                }
            }
        },
        "requests.VerifyGrCmsUser": {
            "type": "object",
            "required": [
                "user"
            ],
            "properties": {
                "user": {
                    "$ref": "#/definitions/model.User"
                }
            }
        },
        "requests.VerifyGrUser": {
            "type": "object",
            "required": [
                "user"
            ],
            "properties": {
                "user": {
                    "$ref": "#/definitions/model.User"
                }
            }
        },
        "requests.VerifyUserExistence": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "Email address to check for existing registration.",
                    "type": "string",
                    "example": "user@example.com"
                }
            }
        },
        "responses.AuthResponseData": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "AccessToken is the JWT issued to the client for subsequent requests.\nExample: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "responses.AuthSuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "in: body",
                    "type": "integer",
                    "example": 1000
                },
                "data": {
                    "$ref": "#/definitions/responses.AuthResponseData"
                },
                "message": {
                    "type": "string",
                    "example": "token successfully generated"
                }
            }
        },
        "responses.CachedGrCmsSuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "in: body",
                    "type": "integer",
                    "example": 1002
                },
                "data": {
                    "$ref": "#/definitions/responses.VerifyGrCmsUserResponseData"
                },
                "message": {
                    "type": "string",
                    "example": "cached profile found"
                }
            }
        },
        "responses.CreateSuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "in: body",
                    "type": "integer",
                    "example": 1000
                },
                "data": {
                    "$ref": "#/definitions/responses.CreateUserResponseData"
                },
                "message": {
                    "type": "string",
                    "example": "user created"
                }
            }
        },
        "responses.CreateUserResponseData": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/model.User"
                }
            }
        },
        "responses.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Code is your internal API status code, e.g. 1002",
                    "type": "integer",
                    "example": 0
                },
                "data": {
                    "type": "string"
                },
                "message": {
                    "description": "Message is a human‑readable description, e.g. \"invalid json request body\"",
                    "type": "string"
                }
            }
        },
        "responses.GetUserSuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "in: body",
                    "type": "integer",
                    "example": 1002
                },
                "data": {
                    "$ref": "#/definitions/model.User"
                },
                "message": {
                    "type": "string",
                    "example": "user found"
                }
            }
        },
        "responses.GrCmsExistenceSuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "in: body",
                    "type": "integer",
                    "example": 1003
                },
                "data": {},
                "message": {
                    "type": "string",
                    "example": "existing user not found"
                }
            }
        },
        "responses.GrExistenceSuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "in: body",
                    "type": "integer",
                    "example": 1000
                },
                "data": {
                    "$ref": "#/definitions/responses.VerifyGrUserResponseData"
                },
                "message": {
                    "type": "string",
                    "example": "gr profile found"
                }
            }
        },
        "responses.LoginResponseData": {
            "type": "object",
            "properties": {
                "login_session_token": {
                    "description": "LoginSessionToken is the JWT issued after successful authentication.\nexample: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "login_session_token_expiry": {
                    "description": "LoginSessionTokenExpiry is the Unix timestamp (seconds since epoch) when the token expires.\nexample: 1744176000",
                    "type": "integer",
                    "example": 1744176000
                },
                "otp": {
                    "description": "Otp is the one‑time password sent to the user.\nexample: \"123456\"",
                    "type": "string",
                    "example": "123456"
                },
                "otp_expiry": {
                    "description": "OtpExpiry is the Unix timestamp (seconds since epoch) when the OTP expires.\nexample: 1744176000",
                    "type": "integer",
                    "example": 1744176000
                }
            }
        },
        "responses.LoginSuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "in: body",
                    "type": "integer",
                    "example": 1000
                },
                "data": {
                    "$ref": "#/definitions/responses.LoginResponseData"
                },
                "message": {
                    "type": "string",
                    "example": "login successful"
                }
            }
        },
        "responses.RegisterSuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "in: body",
                    "type": "integer",
                    "example": 1000
                },
                "data": {
                    "$ref": "#/definitions/model.Otp"
                },
                "message": {
                    "type": "string",
                    "example": "email not found"
                }
            }
        },
        "responses.UpdateUserSuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "in: body",
                    "type": "integer",
                    "example": 1000
                },
                "data": {
                    "$ref": "#/definitions/model.User"
                },
                "message": {
                    "type": "string",
                    "example": "update successful"
                }
            }
        },
        "responses.VerifyGrCmsUserResponseData": {
            "type": "object",
            "properties": {
                "dob": {
                    "type": "string"
                },
                "reg_id": {
                    "type": "string"
                }
            }
        },
        "responses.VerifyGrUserResponseData": {
            "type": "object",
            "properties": {
                "otp": {
                    "description": "Otp is the one‑time password sent to the user.\nexample: \"123456\"",
                    "type": "string",
                    "example": "123456"
                },
                "otp_expiry": {
                    "description": "OtpExpiry is the Unix timestamp (seconds since epoch) when the OTP expires.\nexample: 1744176000",
                    "type": "integer",
                    "example": 1744176000
                },
                "user": {
                    "description": "User contains user data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.User"
                        }
                    ]
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Type \"Bearer \u003cyour-jwt\u003e\" to authorize",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:18080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "LBE API",
	Description:      "Endpoints for authentication, login and register\n\n<details open>\n<summary><a href=\"javascript:void(0)\" style=\"cursor: pointer !important;\">📋\u00a0Message Codes</a></summary>\n\n| Code   | Description                   |\n| ------ | ------------------------------|\n| 1000   | successful                    |\n| 1001   | unsuccessful                  |\n| 1002   | found                         |\n| 1003   | not found                     |\n| 4000   | internal error                |\n| 4001   | invalid request body          |\n| 4002   | invalid authentication token  |\n| 4003   | missing authentication token  |\n| 4004   | invalid signature             |\n| 4005   | missing signature             |\n| 4006   | invalid appid                 |\n| 4007   | missing appid                 |\n| 4008   | invalid query parameters      |\n| 4009   | existing user not found       |\n| 4010   | existing user found           |\n| 4011   | cached profile not found      |\n| 4012   | gr member linked              |\n| 4013   | gr member not found           |\n\n</details>",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
