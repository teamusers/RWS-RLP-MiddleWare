basePath: /api/v1
definitions:
  model.GrMember:
    properties:
      dob:
        description: Dob is the date of birth in YYYY-MM-DD format.
        example: "1985-04-12"
        type: string
      email:
        description: Email is the member's email address.
        example: jane.doe@example.com
        type: string
      f_name:
        description: FirstName is the given name of the GR member.
        example: Jane
        type: string
      gr_id:
        description: GrId is the unique GR member identifier.
        example: GR12345
        type: string
      l_name:
        description: LastName is the family name of the GR member.
        example: Doe
        type: string
      mobile:
        description: Mobile is the contact phone number.
        example: "98765432"
        type: string
    type: object
  model.Otp:
    properties:
      otp:
        description: |-
          Otp is the one‑time password sent to the user.
          example: "123456"
        example: "123456"
        type: string
      otp_expiry:
        description: |-
          OtpExpiry is the Unix timestamp (seconds since epoch) when the OTP expires.
          example: 1744176000
        example: 1744176000
        type: integer
    type: object
  requests.AuthRequest:
    properties:
      nonce:
        description: A unique random string for each request to prevent replay attacks.
        example: API
        type: string
      signature:
        description: |-
          HMAC-SHA256 signature of "appID|timestamp|nonce" hex-encoded.
          Computed by concatenating the appID, timestamp, and nonce to form a base string,
          then applying HMAC-SHA256 with the secret key and hex-encoding the resulting digest.
        example: 1558850cb1b48e826197c48d6a14c5f3bf4b644bcb0065ceb0b07978296116bc
        type: string
      timestamp:
        description: Unix timestamp (seconds since epoch) when the request was generated.
        example: "1744075148"
        type: string
    required:
    - nonce
    - signature
    - timestamp
    type: object
  requests.Login:
    properties:
      email:
        description: Email address of the user attempting to log in
        example: user@example.com
        type: string
    required:
    - email
    type: object
  requests.PhoneNumber:
    properties:
      phone_number:
        description: Phone number (digits only)
        example: "1234123123"
        type: string
      phone_type:
        description: 'Type of phone number: mobile, office, home, fax, other'
        example: home
        type: string
      preference_flags:
        description: Flags like "primary"
        example:
        - '["primary"]'
        items:
          type: string
        type: array
    type: object
  requests.Referral:
    properties:
      referral_code:
        description: Code of the referring customer
        example: JOHN-70A756
        type: string
    type: object
  requests.RegisterGr:
    properties:
      gr_id:
        description: GR system identifier for the member.
        example: GR12345
        type: string
      gr_pin:
        description: PIN code associated with the GR member.
        example: "9876"
        type: string
    required:
    - gr_id
    - gr_pin
    type: object
  requests.RegisterGrCms:
    properties:
      dob:
        description: Dob is the date of birth in YYYY-MM-DD format.
        example: "1985-04-12"
        type: string
      email:
        description: Email is the member's email address.
        example: jane.doe@example.com
        type: string
      f_name:
        description: FirstName is the given name of the GR member.
        example: Jane
        type: string
      gr_id:
        description: GrId is the unique GR member identifier.
        example: GR12345
        type: string
      l_name:
        description: LastName is the family name of the GR member.
        example: Doe
        type: string
      mobile:
        description: Mobile is the contact phone number.
        example: "98765432"
        type: string
      url:
        description: URL to send the registration confirmation link to.
        example: https://example.com/confirm?reg_id=abc123
        type: string
    required:
    - url
    type: object
  requests.RegisterUser:
    properties:
      sign_up_type:
        example: NEW
        type: string
      users:
        $ref: '#/definitions/requests.UserRequest'
    type: object
  requests.UpdateBurnPin:
    properties:
      burn_pin:
        description: BurnPin is the new numeric PIN to set.
        example: 4321
        type: integer
      email:
        description: Email of the user whose burn PIN is being updated.
        example: user@example.com
        type: string
    required:
    - burn_pin
    - email
    type: object
  requests.UserRequest:
    properties:
      address:
        description: Address line 1
        example: 7 Tremont Street
        type: string
      address2:
        description: Address line 2
        example: 8 Tremont Street
        type: string
      city:
        description: City of residence
        example: Boston
        type: string
      country:
        description: 3-letter ISO-3166-1 country code
        example: USA
        type: string
      dob:
        description: Date of birth, YYYY-MM-DD
        example: "1980-01-01"
        type: string
      email:
        description: Customer’s email (encrypted at rest). Required if ExternalID
          is not specified.
        example: john.smith@test.com
        type: string
      external_id:
        description: |-
          Identifier for customer in external system.
          Required if Email is not specified.
        example: "1284111"
        type: string
      external_id_type:
        description: Type associated with external identifier.
        example: facebook
        type: string
      first_name:
        description: First name
        example: John
        type: string
      gender:
        description: 'Gender of customer: m or f'
        example: m
        type: string
      ip:
        description: Customer’s IP at registration.
        example: 203.0.113.42
        type: string
      last_name:
        description: Last name (surname)
        example: Smith
        type: string
      locale:
        description: Preferred locale, e.g. en-US
        example: en-US
        type: string
      opted_in:
        description: Indicates opt-in to loyalty program (defaults to true if not
          set).
        example: true
        type: boolean
      phone_numbers:
        description: Phone numbers associated with customer
        items:
          $ref: '#/definitions/requests.PhoneNumber'
        type: array
      referral:
        allOf:
        - $ref: '#/definitions/requests.Referral'
        description: Referral info when signing up with a referrer code
      state:
        description: State/province/region
        example: MA
        type: string
      zip:
        description: Zip or postal code
        example: "02021"
        type: string
    type: object
  requests.VerifyUserExistence:
    properties:
      email:
        description: Email address to check for existing registration.
        example: user@example.com
        type: string
    required:
    - email
    type: object
  responses.AuthResponseData:
    properties:
      access_token:
        description: |-
          AccessToken is the JWT issued to the client for subsequent requests.
          Example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  responses.AuthSuccessResponse:
    properties:
      code:
        description: 'in: body'
        example: 1000
        type: integer
      data:
        $ref: '#/definitions/responses.AuthResponseData'
      message:
        example: token successfully generated
        type: string
    type: object
  responses.CachedGrCmsSuccessResponse:
    properties:
      code:
        description: 'in: body'
        example: 1002
        type: integer
      data:
        $ref: '#/definitions/model.GrMember'
      message:
        example: cached profile found
        type: string
    type: object
  responses.CreateSuccessResponse:
    properties:
      code:
        description: 'in: body'
        example: 1000
        type: integer
      data:
        $ref: '#/definitions/responses.User'
      message:
        example: user created
        type: string
    type: object
  responses.ErrorResponse:
    properties:
      code:
        description: Code is your internal API status code, e.g. 1002
        example: 0
        type: integer
      data:
        type: string
      message:
        description: Message is a human‑readable description, e.g. "invalid json request
          body"
        type: string
    type: object
  responses.GetUserSuccessResponse:
    properties:
      code:
        description: 'in: body'
        example: 1002
        type: integer
      data:
        $ref: '#/definitions/responses.User'
      message:
        example: user found
        type: string
    type: object
  responses.GrCmsExistenceSuccessResponse:
    properties:
      code:
        description: 'in: body'
        example: 1003
        type: integer
      data:
        $ref: '#/definitions/model.GrMember'
      message:
        example: email not found
        type: string
    type: object
  responses.GrExistenceSuccessResponse:
    properties:
      code:
        description: 'in: body'
        example: 1000
        type: integer
      data:
        $ref: '#/definitions/model.GrMember'
      message:
        example: successful
        type: string
    type: object
  responses.Identifier:
    properties:
      external_id:
        type: string
      external_id_type:
        type: string
    type: object
  responses.LoginResponseData:
    properties:
      login_session_token:
        description: |-
          LoginSessionToken is the JWT issued after successful authentication.
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      login_session_token_expiry:
        description: |-
          LoginSessionTokenExpiry is the Unix timestamp (seconds since epoch) when the token expires.
          example: 1744176000
        example: 1744176000
        type: integer
      otp:
        description: |-
          Otp is the one‑time password sent to the user.
          example: "123456"
        example: "123456"
        type: string
      otp_expiry:
        description: |-
          OtpExpiry is the Unix timestamp (seconds since epoch) when the OTP expires.
          example: 1744176000
        example: 1744176000
        type: integer
    type: object
  responses.LoginSuccessResponse:
    properties:
      code:
        description: 'in: body'
        example: 1000
        type: integer
      data:
        $ref: '#/definitions/responses.LoginResponseData'
      message:
        example: login successful
        type: string
    type: object
  responses.PhoneNumber:
    properties:
      phone_number:
        type: string
      phone_type:
        type: string
      preference_flags:
        items:
          type: string
        type: array
      verified_ownership:
        type: boolean
    type: object
  responses.RegisterSuccessResponse:
    properties:
      code:
        description: 'in: body'
        example: 1000
        type: integer
      data:
        $ref: '#/definitions/model.Otp'
      message:
        example: email not found
        type: string
    type: object
  responses.UpdateUserSuccessResponse:
    properties:
      code:
        description: 'in: body'
        example: 1000
        type: integer
      data:
        $ref: '#/definitions/responses.User'
      message:
        example: update successful
        type: string
    type: object
  responses.User:
    properties:
      account_status:
        type: string
      address:
        type: string
      address2:
        type: string
      auth_token:
        type: string
      available_points:
        type: integer
      city:
        type: string
      country:
        type: string
      created_at:
        description: 'format: "2006-01-02 15:04:05"'
        type: string
      dob:
        description: 'format: "2006-01-02"'
        type: string
      email:
        type: string
      external_id:
        type: string
      first_name:
        type: string
      gender:
        type: string
      id:
        type: string
      identifiers:
        items:
          $ref: '#/definitions/responses.Identifier'
        type: array
      last_name:
        type: string
      opted_in:
        type: boolean
      phone_numbers:
        items:
          $ref: '#/definitions/responses.PhoneNumber'
        type: array
      proxy_ids:
        items:
          type: string
        type: array
      referrer_code:
        type: string
      registered_at:
        description: same format as CreatedAt
        type: string
      state:
        type: string
      suspended:
        type: boolean
      tier:
        type: string
      updated_at:
        description: same format as CreatedAt
        type: string
      zip:
        type: string
    type: object
host: localhost:18080
info:
  contact: {}
  description: "Endpoints for authentication, login and register\n\n<details open>\n<summary><a
    href=\"javascript:void(0)\" style=\"cursor: pointer !important;\">\U0001F4CB Message
    Codes</a></summary>\n\n| Code   | Description                   |\n| ------ |
    ------------------------------|\n| 1000   | successful                    |\n|
    1001   | unsuccessful                  |\n| 1002   | found                         |\n|
    1003   | not found                     |\n| 4000   | internal error                |\n|
    4001   | invalid request body          |\n| 4002   | invalid authentication token
    \ |\n| 4003   | missing authentication token  |\n| 4004   | invalid signature
    \            |\n| 4005   | missing signature             |\n| 4006   | invalid
    appid                 |\n| 4007   | missing appid                 |\n| 4008   |
    invalid query parameters      |\n\n</details>"
  title: LBE API
  version: "1.0"
paths:
  /auth:
    post:
      consumes:
      - application/json
      description: Validates AppID header and HMAC signature, then returns a JWT access
        token.
      parameters:
      - default: app1234
        description: Client system AppID
        in: header
        name: AppID
        required: true
        type: string
      - description: Authentication request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: JWT access token returned successfully
          schema:
            $ref: '#/definitions/responses.AuthSuccessResponse'
        "400":
          description: Malformed JSON in request body
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: HMAC signature mismatch
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Unexpected server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Generate authentication token
      tags:
      - auth
  /user/{external_id}:
    get:
      consumes:
      - application/json
      description: Retrieves the profile (including phone numbers) for a given user
        by external_id.
      parameters:
      - description: user external ID
        in: path
        name: external_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: user found
          schema:
            $ref: '#/definitions/responses.GetUserSuccessResponse'
        "400":
          description: Invalid or missing external_id path parameter
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized – API key missing or invalid
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: existing user not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - user
  /user/gr:
    post:
      consumes:
      - application/json
      description: Checks if a GR member ID is already registered.
      parameters:
      - description: GR registration check payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterGr'
      produces:
      - application/json
      responses:
        "200":
          description: GR member found
          schema:
            $ref: '#/definitions/responses.GrExistenceSuccessResponse'
        "400":
          description: Invalid JSON request body
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized – API key missing or invalid
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Verify GR member existence
      tags:
      - user
  /user/gr-cms:
    post:
      consumes:
      - application/json
      description: Checks if a GR CMS member email is in the system and caches their
        profile for follow‑up.
      parameters:
      - description: GR CMS register payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterGrCms'
      produces:
      - application/json
      responses:
        "200":
          description: Email not found; profile cached
          schema:
            $ref: '#/definitions/responses.GrCmsExistenceSuccessResponse'
        "400":
          description: Invalid JSON request body
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized – API key missing or invalid
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Email already registered
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Verify and cache GR CMS member
      tags:
      - user
  /user/gr-reg/{reg_id}:
    get:
      consumes:
      - application/json
      description: Retrieves a temporarily cached GR CMS profile by registration ID.
      parameters:
      - description: Registration ID
        in: path
        name: reg_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Cached profile found
          schema:
            $ref: '#/definitions/responses.CachedGrCmsSuccessResponse'
        "400":
          description: Registration ID is required
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Cached profile not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get cached GR CMS profile
      tags:
      - user
  /user/login:
    post:
      consumes:
      - application/json
      description: Validates user email, generates an OTP, emails it, and returns
        the OTP details plus a login session token.
      parameters:
      - description: Login request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.Login'
      produces:
      - application/json
      responses:
        "200":
          description: Email found; OTP generated and sent; login session token returned
          schema:
            $ref: '#/definitions/responses.LoginSuccessResponse'
        "400":
          description: Invalid JSON request body
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized – API key missing or invalid
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: existing user not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Start login flow via email
      tags:
      - user
  /user/pin:
    put:
      consumes:
      - application/json
      description: Updates the burn PIN for a given email address.
      parameters:
      - description: Email + new burn PIN
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateBurnPin'
      produces:
      - application/json
      responses:
        "200":
          description: update successful
          schema:
            $ref: '#/definitions/responses.UpdateUserSuccessResponse'
        "400":
          description: Invalid JSON request body
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized – API key missing or invalid
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user burn PIN
      tags:
      - user
  /user/register:
    post:
      consumes:
      - application/json
      description: Registers a new user record in the system.
      parameters:
      - description: User create payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterUser'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/responses.CreateSuccessResponse'
        "400":
          description: Invalid JSON request body
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized – API key missing or invalid
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create new user
      tags:
      - user
  /user/register/verify:
    post:
      consumes:
      - application/json
      description: Checks if an email is already registered; if not, sends an OTP
        for signup.
      parameters:
      - description: Registration request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.VerifyUserExistence'
      produces:
      - application/json
      responses:
        "200":
          description: Email not registered; OTP sent
          schema:
            $ref: '#/definitions/responses.RegisterSuccessResponse'
        "400":
          description: Invalid JSON request body
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized – API key missing or invalid
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Email already registered
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Verify email for registration
      tags:
      - user
  /user/update/{external_id}:
    put:
      consumes:
      - application/json
      description: Updates a user's profile fields (non‐zero values in the JSON body).
      parameters:
      - description: user external ID
        in: path
        name: external_id
        required: true
        type: string
      - description: Profile fields to update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Update successful
          schema:
            $ref: '#/definitions/responses.UpdateUserSuccessResponse'
        "400":
          description: Invalid JSON request body
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized – API key missing or invalid
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: existing user not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user profile
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    description: Type "Bearer <your-jwt>" to authorize
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
