basePath: /api/v1
definitions:
  model.GrProfile:
    properties:
      class:
        description: |-
          User’s membership class
          example: premium
        example: premium
        type: string
      dob:
        description: |-
          Date of birth (YYYY-MM-DD)
          example: 1985-07-20
        example: "1985-07-20"
        type: string
      email:
        description: |-
          User’s email address
          example: alice.smith@example.com
        example: alice.smith@example.com
        type: string
      first_name:
        description: |-
          User’s first name
          example: Alice
        example: Alice
        type: string
      id:
        description: |-
          Unique identifier for the profile
          example: 123e4567-e89b-12d3-a456-426614174000
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      last_name:
        description: |-
          User’s last name
          example: Smith
        example: Smith
        type: string
      mobile_code:
        description: |-
          Country dialing code
          example: 65
        example: 65
        type: integer
      mobile_number:
        description: |-
          Local mobile number
          example: 91234567
        example: 91234567
        type: integer
      pin:
        description: |-
          Four-digit PIN for quick auth
          example: 1234
        example: "1234"
        type: string
    type: object
  model.Identifier:
    properties:
      external_id:
        description: |-
          The external identifier value
          example: ABC123
        example: ABC123
        type: string
      external_id_type:
        description: |-
          Type of the external identifier
          example: loyalty
        example: loyalty
        type: string
    type: object
  model.Otp:
    properties:
      otp:
        description: |-
          Otp is the one‑time password sent to the user.
          example: "123456"
        example: "123456"
        type: string
      otp_expiry:
        description: |-
          OtpExpiry is the Unix timestamp (seconds since epoch) when the OTP expires.
          example: 1744176000
        example: 1744176000
        type: integer
    type: object
  model.User:
    properties:
      available_points:
        description: |-
          Loyalty points available
          example: 1200
        example: 1200
        type: integer
      country:
        description: |-
          ISO 3166-1 alpha-2 country code
          example: SG
        example: SG
        type: string
      created_at:
        description: |-
          Timestamp when the record was created (RFC3339)
          example: 2025-04-01T08:30:00Z
        example: "2006-01-02 15:04:05"
        type: string
      dob:
        description: |-
          Date of birth in YYYY-MM-DD
          example: 1990-05-15
        example: "1990-05-15"
        type: string
      email:
        description: |-
          Email address of the user
          example: john.doe@example.com
        example: john.doe@example.com
        type: string
      first_name:
        description: |-
          User's first name
          example: John
        example: John
        type: string
      identifiers:
        description: |-
          List of external identifiers for the user
          example: [{"external_id":"ABC123","external_id_type":"loyalty"}]
        items:
          $ref: '#/definitions/model.Identifier'
        type: array
      last_name:
        description: |-
          User's last name
          example: Doe
        example: Doe
        type: string
      mobile_code:
        description: |-
          Country dialing code
          example: 1
        example: 1
        type: integer
      mobile_number:
        description: |-
          Mobile phone number
          example: 98765432
        example: 98765432
        type: integer
      registered_at:
        description: |-
          Timestamp when the user registered
          example: 2025-04-01T08:30:00Z
        example: "2006-01-02 15:04:05"
        type: string
      suspended:
        description: |-
          Whether the account is suspended
          example: false
        example: false
        type: boolean
      tier:
        description: |-
          Loyalty tier name
          example: gold
        example: gold
        type: string
      updated_at:
        description: |-
          Timestamp of last update
          example: 2025-05-05T14:00:00Z
        example: "2006-01-02 15:04:05"
        type: string
      user_profile:
        allOf:
        - $ref: '#/definitions/model.UserProfile'
        description: Additional profile details
    type: object
  model.UserProfile:
    properties:
      active_status:
        description: |-
          Active status code (e.g., 1=active, 0=inactive)
          example: 1
        example: 1
        type: integer
      language:
        description: |-
          Preferred language (ISO 639-1)
          example: en
        example: en
        type: string
      market_pref_email:
        description: |-
          Whether the user opts in to email marketing
          example: false
        example: false
        type: boolean
      market_pref_mobile:
        description: |-
          Whether the user opts in to SMS/mobile marketing
          example: true
        example: true
        type: boolean
      market_pref_push:
        description: |-
          Whether the user opts in to push notifications
          example: true
        example: true
        type: boolean
      previous_email:
        description: |-
          Previously used email
          example: john.old@example.com
        example: john.old@example.com
        type: string
    type: object
  requests.AuthRequest:
    properties:
      nonce:
        description: A unique random string for each request to prevent replay attacks.
        example: API
        type: string
      signature:
        description: |-
          HMAC-SHA256 signature of "appID|timestamp|nonce" hex-encoded.
          Computed by concatenating the appID, timestamp, and nonce to form a base string,
          then applying HMAC-SHA256 with the secret key and hex-encoding the resulting digest.
        example: 1558850cb1b48e826197c48d6a14c5f3bf4b644bcb0065ceb0b07978296116bc
        type: string
      timestamp:
        description: Unix timestamp (seconds since epoch) when the request was generated.
        example: "1744075148"
        type: string
    required:
    - nonce
    - signature
    - timestamp
    type: object
  requests.Login:
    properties:
      email:
        description: Email address of the user attempting to log in
        example: user@example.com
        type: string
    required:
    - email
    type: object
  requests.RegisterUser:
    properties:
      gr_profile:
        $ref: '#/definitions/model.GrProfile'
      reg_id:
        example: 123456
        type: integer
      sign_up_type:
        example: NEW
        type: string
      user:
        $ref: '#/definitions/model.User'
    type: object
  requests.UpdateBurnPin:
    properties:
      burn_pin:
        description: BurnPin is the new numeric PIN to set.
        example: 4321
        type: integer
      email:
        description: Email of the user whose burn PIN is being updated.
        example: user@example.com
        type: string
    required:
    - burn_pin
    - email
    type: object
  requests.VerifyGrCmsUser:
    properties:
      gr_profile:
        $ref: '#/definitions/model.GrProfile'
    required:
    - gr_profile
    type: object
  requests.VerifyGrUser:
    properties:
      gr_profile:
        $ref: '#/definitions/model.GrProfile'
    required:
    - gr_profile
    type: object
  requests.VerifyUserExistence:
    properties:
      email:
        description: Email address to check for existing registration.
        example: user@example.com
        type: string
    required:
    - email
    type: object
  responses.AuthResponseData:
    properties:
      access_token:
        description: |-
          AccessToken is the JWT issued to the client for subsequent requests.
          Example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  responses.AuthSuccessResponse:
    properties:
      code:
        description: 'in: body'
        example: 1000
        type: integer
      data:
        $ref: '#/definitions/responses.AuthResponseData'
      message:
        example: token successfully generated
        type: string
    type: object
  responses.CachedGrCmsSuccessResponse:
    properties:
      code:
        description: 'in: body'
        example: 1002
        type: integer
      data:
        $ref: '#/definitions/model.GrProfile'
      message:
        example: cached profile found
        type: string
    type: object
  responses.CreateSuccessResponse:
    properties:
      code:
        description: 'in: body'
        example: 1000
        type: integer
      data:
        $ref: '#/definitions/model.User'
      message:
        example: user created
        type: string
    type: object
  responses.ErrorResponse:
    properties:
      code:
        description: Code is your internal API status code, e.g. 1002
        example: 0
        type: integer
      data:
        type: string
      message:
        description: Message is a human‑readable description, e.g. "invalid json request
          body"
        type: string
    type: object
  responses.GetUserSuccessResponse:
    properties:
      code:
        description: 'in: body'
        example: 1002
        type: integer
      data:
        $ref: '#/definitions/model.User'
      message:
        example: user found
        type: string
    type: object
  responses.GrCmsExistenceSuccessResponse:
    properties:
      code:
        description: 'in: body'
        example: 1003
        type: integer
      data:
        $ref: '#/definitions/model.GrProfile'
      message:
        example: email not found
        type: string
    type: object
  responses.GrExistenceSuccessResponse:
    properties:
      code:
        description: 'in: body'
        example: 1000
        type: integer
      data:
        $ref: '#/definitions/model.GrProfile'
      message:
        example: successful
        type: string
    type: object
  responses.LoginResponseData:
    properties:
      login_session_token:
        description: |-
          LoginSessionToken is the JWT issued after successful authentication.
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      login_session_token_expiry:
        description: |-
          LoginSessionTokenExpiry is the Unix timestamp (seconds since epoch) when the token expires.
          example: 1744176000
        example: 1744176000
        type: integer
      otp:
        description: |-
          Otp is the one‑time password sent to the user.
          example: "123456"
        example: "123456"
        type: string
      otp_expiry:
        description: |-
          OtpExpiry is the Unix timestamp (seconds since epoch) when the OTP expires.
          example: 1744176000
        example: 1744176000
        type: integer
    type: object
  responses.LoginSuccessResponse:
    properties:
      code:
        description: 'in: body'
        example: 1000
        type: integer
      data:
        $ref: '#/definitions/responses.LoginResponseData'
      message:
        example: login successful
        type: string
    type: object
  responses.RegisterSuccessResponse:
    properties:
      code:
        description: 'in: body'
        example: 1000
        type: integer
      data:
        $ref: '#/definitions/model.Otp'
      message:
        example: email not found
        type: string
    type: object
  responses.UpdateUserSuccessResponse:
    properties:
      code:
        description: 'in: body'
        example: 1000
        type: integer
      data:
        $ref: '#/definitions/model.User'
      message:
        example: update successful
        type: string
    type: object
host: localhost:18080
info:
  contact: {}
  description: "Endpoints for authentication, login and register\n\n<details open>\n<summary><a
    href=\"javascript:void(0)\" style=\"cursor: pointer !important;\">\U0001F4CB Message
    Codes</a></summary>\n\n| Code   | Description                   |\n| ------ |
    ------------------------------|\n| 1000   | successful                    |\n|
    1001   | unsuccessful                  |\n| 1002   | found                         |\n|
    1003   | not found                     |\n| 4000   | internal error                |\n|
    4001   | invalid request body          |\n| 4002   | invalid authentication token
    \ |\n| 4003   | missing authentication token  |\n| 4004   | invalid signature
    \            |\n| 4005   | missing signature             |\n| 4006   | invalid
    appid                 |\n| 4007   | missing appid                 |\n| 4008   |
    invalid query parameters      |\n| 4009   | existing user not found       |\n|
    4010   | existing user found           |\n| 4011   | cached profile not found
    \     |\n| 4012   | gr member linked              |\n| 4013   | gr member not
    found           |\n\n</details>"
  title: LBE API
  version: "1.0"
paths:
  /auth:
    post:
      consumes:
      - application/json
      description: Validates AppID header and HMAC signature, then returns a JWT access
        token.
      parameters:
      - default: app1234
        description: Client system AppID
        in: header
        name: AppID
        required: true
        type: string
      - description: Authentication request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: JWT access token returned successfully
          schema:
            $ref: '#/definitions/responses.AuthSuccessResponse'
        "400":
          description: Malformed JSON in request body
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: HMAC signature mismatch
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Unexpected server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Generate authentication token
      tags:
      - auth
  /user/{external_id}:
    get:
      consumes:
      - application/json
      description: Retrieves the profile (including phone numbers) for a given user
        by external_id.
      parameters:
      - description: user external ID
        in: path
        name: external_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: user found
          schema:
            $ref: '#/definitions/responses.GetUserSuccessResponse'
        "400":
          description: Invalid or missing external_id path parameter
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized – API key missing or invalid
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: existing user not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - user
  /user/gr:
    post:
      consumes:
      - application/json
      description: Checks if a GR member ID is already registered.
      parameters:
      - description: GR registration check payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.VerifyGrUser'
      produces:
      - application/json
      responses:
        "200":
          description: GR member found
          schema:
            $ref: '#/definitions/responses.GrExistenceSuccessResponse'
        "400":
          description: Invalid JSON request body
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized – API key missing or invalid
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Verify GR member existence
      tags:
      - user
  /user/gr-cms:
    post:
      consumes:
      - application/json
      description: Checks if a GR CMS member email is in the system and caches their
        profile for follow‑up.
      parameters:
      - description: GR CMS register payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.VerifyGrCmsUser'
      produces:
      - application/json
      responses:
        "200":
          description: Email not found; profile cached
          schema:
            $ref: '#/definitions/responses.GrCmsExistenceSuccessResponse'
        "400":
          description: Invalid JSON request body
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized – API key missing or invalid
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Email already registered
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Verify and cache GR CMS member
      tags:
      - user
  /user/gr-reg/{reg_id}:
    get:
      consumes:
      - application/json
      description: Retrieves a temporarily cached GR CMS profile by registration ID.
      parameters:
      - description: Registration ID
        in: path
        name: reg_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Cached profile found
          schema:
            $ref: '#/definitions/responses.CachedGrCmsSuccessResponse'
        "400":
          description: Registration ID is required
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Cached profile not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get cached GR CMS profile
      tags:
      - user
  /user/login:
    post:
      consumes:
      - application/json
      description: Validates user email, generates an OTP, emails it, and returns
        the OTP details plus a login session token.
      parameters:
      - description: Login request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.Login'
      produces:
      - application/json
      responses:
        "200":
          description: Email found; OTP generated and sent; login session token returned
          schema:
            $ref: '#/definitions/responses.LoginSuccessResponse'
        "400":
          description: Invalid JSON request body
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized – API key missing or invalid
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: existing user not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Start login flow via email
      tags:
      - user
  /user/pin:
    put:
      consumes:
      - application/json
      description: Updates the burn PIN for a given email address.
      parameters:
      - description: Email + new burn PIN
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateBurnPin'
      produces:
      - application/json
      responses:
        "200":
          description: update successful
          schema:
            $ref: '#/definitions/responses.UpdateUserSuccessResponse'
        "400":
          description: Invalid JSON request body
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized – API key missing or invalid
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user burn PIN
      tags:
      - user
  /user/register:
    post:
      consumes:
      - application/json
      description: Registers a new user record in the system.
      parameters:
      - description: User create payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterUser'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/responses.CreateSuccessResponse'
        "400":
          description: Invalid JSON request body
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized – API key missing or invalid
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create new user
      tags:
      - user
  /user/register/verify:
    post:
      consumes:
      - application/json
      description: Checks if an email is already registered; if not, sends an OTP
        for signup.
      parameters:
      - description: Registration request payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.VerifyUserExistence'
      produces:
      - application/json
      responses:
        "200":
          description: Email not registered; OTP sent
          schema:
            $ref: '#/definitions/responses.RegisterSuccessResponse'
        "400":
          description: Invalid JSON request body
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized – API key missing or invalid
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: Email already registered
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Verify email for registration
      tags:
      - user
  /user/update/{external_id}:
    put:
      consumes:
      - application/json
      description: Updates a user's profile fields (non‐zero values in the JSON body).
      parameters:
      - description: user external ID
        in: path
        name: external_id
        required: true
        type: string
      - description: Profile fields to update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: Update successful
          schema:
            $ref: '#/definitions/responses.UpdateUserSuccessResponse'
        "400":
          description: Invalid JSON request body
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Unauthorized – API key missing or invalid
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "409":
          description: existing user not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user profile
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    description: Type "Bearer <your-jwt>" to authorize
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
