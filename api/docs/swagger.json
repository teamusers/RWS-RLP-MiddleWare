{
    "swagger": "2.0",
    "info": {
        "description": "Endpoints for authentication, login and register\n\n\u003cdetails open\u003e\n\u003csummary\u003e\u003ca href=\"javascript:void(0)\" style=\"cursor: pointer !important;\"\u003e📋 Message Codes\u003c/a\u003e\u003c/summary\u003e\n\n| Code   | Description                   |\n| ------ | ------------------------------|\n| 1000   | successful                    |\n| 1001   | unsuccessful                  |\n| 1002   | found                         |\n| 1003   | not found                     |\n| 4000   | internal error                |\n| 4001   | invalid request body          |\n| 4002   | invalid authentication token  |\n| 4003   | missing authentication token  |\n| 4004   | invalid signature             |\n| 4005   | missing signature             |\n| 4006   | invalid appid                 |\n| 4007   | missing appid                 |\n| 4008   | invalid query parameters      |\n\n\u003c/details\u003e",
        "title": "LBE API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:18080",
    "basePath": "/api/v1",
    "paths": {
        "/auth": {
            "post": {
                "description": "Validates AppID header and HMAC signature, then returns a JWT access token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Generate authentication token",
                "parameters": [
                    {
                        "type": "string",
                        "default": "app1234",
                        "description": "Client system AppID",
                        "name": "AppID",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Authentication request payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.AuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT access token returned successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.AuthSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Malformed JSON in request body",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "HMAC signature mismatch",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Unexpected server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gr": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Checks if a GR member ID is already registered.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "gr"
                ],
                "summary": "Verify GR member existence",
                "parameters": [
                    {
                        "description": "GR registration check payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.RegisterGr"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GR member found",
                        "schema": {
                            "$ref": "#/definitions/responses.GrExistenceSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON request body",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gr-cms/verify": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Checks if a GR CMS member email is in the system and caches their profile for follow‑up.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "grcms"
                ],
                "summary": "Verify and cache GR CMS member",
                "parameters": [
                    {
                        "description": "GR CMS register payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.RegisterGrCms"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email not found; profile cached",
                        "schema": {
                            "$ref": "#/definitions/responses.GrCmsExistenceSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON request body",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email already registered",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/gr-cms/{reg_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a temporarily cached GR CMS profile by registration ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "grcms"
                ],
                "summary": "Get cached GR CMS profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Registration ID",
                        "name": "reg_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cached profile found",
                        "schema": {
                            "$ref": "#/definitions/responses.CachedGrCmsSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Registration ID is required",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Cached profile not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Validates user email, generates an OTP, emails it, and returns the OTP details plus a login session token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Start login flow via email",
                "parameters": [
                    {
                        "description": "Login request payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email found; OTP generated and sent; login session token returned",
                        "schema": {
                            "$ref": "#/definitions/responses.LoginSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON request body",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/pin": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates the burn PIN for a given email address.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user burn PIN",
                "parameters": [
                    {
                        "description": "Email + new burn PIN",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdateBurnPin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "update successful",
                        "schema": {
                            "$ref": "#/definitions/responses.UpdateUserSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON request body",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Registers a new user record in the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create new user",
                "parameters": [
                    {
                        "description": "User create payload",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.RegisterUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "$ref": "#/definitions/responses.CreateSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON request body",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/register/verify": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Checks if an email is already registered; if not, sends an OTP for signup.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Verify email for registration",
                "parameters": [
                    {
                        "description": "Registration request payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.VerifyUserExistence"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email not registered; OTP sent",
                        "schema": {
                            "$ref": "#/definitions/responses.RegisterSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON request body",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email already registered",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/{external_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves the profile (including phone numbers) for a given user by external_id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user external ID",
                        "name": "external_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user found",
                        "schema": {
                            "$ref": "#/definitions/responses.GetUserSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid or missing external_id path parameter",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "user not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates a user's profile fields (non‐zero values in the JSON body).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user external ID",
                        "name": "external_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Profile fields to update",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update successful",
                        "schema": {
                            "$ref": "#/definitions/responses.UpdateUserSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON request body",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized – API key missing or invalid",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "user not found",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/responses.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.GrMember": {
            "type": "object",
            "properties": {
                "dob": {
                    "description": "Dob is the date of birth in YYYY-MM-DD format.",
                    "type": "string",
                    "example": "1985-04-12"
                },
                "email": {
                    "description": "Email is the member's email address.",
                    "type": "string",
                    "example": "jane.doe@example.com"
                },
                "f_name": {
                    "description": "FirstName is the given name of the GR member.",
                    "type": "string",
                    "example": "Jane"
                },
                "gr_id": {
                    "description": "GrId is the unique GR member identifier.",
                    "type": "string",
                    "example": "GR12345"
                },
                "l_name": {
                    "description": "LastName is the family name of the GR member.",
                    "type": "string",
                    "example": "Doe"
                },
                "mobile": {
                    "description": "Mobile is the contact phone number.",
                    "type": "string",
                    "example": "98765432"
                }
            }
        },
        "model.Identifier": {
            "type": "object",
            "properties": {
                "external_id": {
                    "type": "string",
                    "example": "1234abcd"
                },
                "external_id_type": {
                    "type": "string",
                    "example": "facebook"
                }
            }
        },
        "model.Otp": {
            "type": "object",
            "properties": {
                "otp": {
                    "description": "Otp is the one‑time password sent to the user.\nexample: \"123456\"",
                    "type": "string",
                    "example": "123456"
                },
                "otp_expiry": {
                    "description": "OtpExpiry is the Unix timestamp (seconds since epoch) when the OTP expires.\nexample: 1744176000",
                    "type": "integer",
                    "example": 1744176000
                }
            }
        },
        "model.PhoneNumber": {
            "type": "object",
            "properties": {
                "phone_number": {
                    "type": "string",
                    "example": "1234123123"
                },
                "phone_type": {
                    "type": "string",
                    "example": "home"
                },
                "preference_flags": {
                    "type": "string",
                    "example": "primary"
                },
                "verified_ownership": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "account_status": {
                    "description": "AccountStatus indicates the user's account status.\nexample: good",
                    "type": "string",
                    "example": "good"
                },
                "created_at": {
                    "description": "CreatedAt is the timestamp when the user account was created.\nexample: 2016-10-21T18:12:22Z",
                    "type": "string",
                    "example": "2016-10-21T18:12:22Z"
                },
                "dob": {
                    "description": "DOB is the user's date of birth.\nexample: 1980-01-01",
                    "type": "string",
                    "example": "1980-01-01"
                },
                "email": {
                    "description": "Email is the user's email address.\nexample: john.smith@fake.email.addr",
                    "type": "string",
                    "example": "john.smith@fake.email.addr"
                },
                "external_id": {
                    "description": "ExternalID is the user's external identifier.\nexample: 654321",
                    "type": "string",
                    "example": "654321"
                },
                "gender": {
                    "description": "Gender of the user (m/f).\nexample: m",
                    "type": "string",
                    "example": "m"
                },
                "id": {
                    "description": "ID is the auto-incrementing primary key.\nexample: 1",
                    "type": "integer"
                },
                "identifiers": {
                    "description": "Identifiers from external systems.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Identifier"
                    }
                },
                "opted_in": {
                    "description": "OptedIn indicates whether the user has opted in.\nexample: true",
                    "type": "boolean",
                    "example": true
                },
                "phone_numbers": {
                    "description": "PhoneNumbers associated with this user.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.PhoneNumber"
                    }
                },
                "referrer_code": {
                    "description": "ReferrerCode is the code used at sign‑up.\nexample: JOHN-70A756",
                    "type": "string",
                    "example": "JOHN-70A756"
                },
                "registered_at": {
                    "description": "RegisteredAt is the timestamp when the user completed registration.\nexample: 2016-10-21T18:12:22Z",
                    "type": "string",
                    "example": "2016-10-21T18:12:22Z"
                },
                "suspended": {
                    "description": "Suspended indicates whether the account is suspended.\nexample: false",
                    "type": "boolean",
                    "example": false
                },
                "updated_at": {
                    "description": "UpdatedAt is the timestamp of the last update.\nexample: 2016-10-21T18:12:22Z",
                    "type": "string",
                    "example": "2016-10-21T18:12:22Z"
                }
            }
        },
        "requests.AuthRequest": {
            "type": "object",
            "required": [
                "nonce",
                "signature",
                "timestamp"
            ],
            "properties": {
                "nonce": {
                    "description": "A unique random string for each request to prevent replay attacks.",
                    "type": "string",
                    "example": "API"
                },
                "signature": {
                    "description": "HMAC-SHA256 signature of \"appID|timestamp|nonce\" hex-encoded.\nComputed by concatenating the appID, timestamp, and nonce to form a base string,\nthen applying HMAC-SHA256 with the secret key and hex-encoding the resulting digest.",
                    "type": "string",
                    "example": "1558850cb1b48e826197c48d6a14c5f3bf4b644bcb0065ceb0b07978296116bc"
                },
                "timestamp": {
                    "description": "Unix timestamp (seconds since epoch) when the request was generated.",
                    "type": "string",
                    "example": "1744075148"
                }
            }
        },
        "requests.Login": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "Email address of the user attempting to log in",
                    "type": "string",
                    "example": "user@example.com"
                }
            }
        },
        "requests.RegisterGr": {
            "type": "object",
            "required": [
                "gr_id",
                "gr_pin"
            ],
            "properties": {
                "gr_id": {
                    "description": "GR system identifier for the member.",
                    "type": "string",
                    "example": "GR12345"
                },
                "gr_pin": {
                    "description": "PIN code associated with the GR member.",
                    "type": "string",
                    "example": "9876"
                }
            }
        },
        "requests.RegisterGrCms": {
            "type": "object",
            "required": [
                "url"
            ],
            "properties": {
                "dob": {
                    "description": "Dob is the date of birth in YYYY-MM-DD format.",
                    "type": "string",
                    "example": "1985-04-12"
                },
                "email": {
                    "description": "Email is the member's email address.",
                    "type": "string",
                    "example": "jane.doe@example.com"
                },
                "f_name": {
                    "description": "FirstName is the given name of the GR member.",
                    "type": "string",
                    "example": "Jane"
                },
                "gr_id": {
                    "description": "GrId is the unique GR member identifier.",
                    "type": "string",
                    "example": "GR12345"
                },
                "l_name": {
                    "description": "LastName is the family name of the GR member.",
                    "type": "string",
                    "example": "Doe"
                },
                "mobile": {
                    "description": "Mobile is the contact phone number.",
                    "type": "string",
                    "example": "98765432"
                },
                "url": {
                    "description": "URL to send the registration confirmation link to.",
                    "type": "string",
                    "example": "https://example.com/confirm?reg_id=abc123"
                }
            }
        },
        "requests.RegisterUser": {
            "type": "object",
            "properties": {
                "sign_up_type": {
                    "type": "string",
                    "example": "NEW"
                },
                "users": {
                    "$ref": "#/definitions/model.User"
                }
            }
        },
        "requests.UpdateBurnPin": {
            "type": "object",
            "required": [
                "burn_pin",
                "email"
            ],
            "properties": {
                "burn_pin": {
                    "description": "BurnPin is the new numeric PIN to set.",
                    "type": "integer",
                    "example": 4321
                },
                "email": {
                    "description": "Email of the user whose burn PIN is being updated.",
                    "type": "string",
                    "example": "user@example.com"
                }
            }
        },
        "requests.User": {
            "type": "object",
            "properties": {
                "burn_pin": {
                    "description": "BurnPin is the numeric PIN used for burn operations.",
                    "type": "integer",
                    "example": 1234
                },
                "email": {
                    "description": "Email is the user’s email address.",
                    "type": "string",
                    "example": "user@example.com"
                },
                "external_id": {
                    "description": "ExternalID is the client system’s unique identifier for this user.",
                    "type": "string",
                    "example": "abc123"
                },
                "external_id_type": {
                    "description": "ExternalTYPE describes the type or source of the external ID.",
                    "type": "string",
                    "example": "EMAIL"
                },
                "gr_id": {
                    "description": "GR_ID is the group or partner system identifier for the user.",
                    "type": "string",
                    "example": "GR12345"
                },
                "rlp_id": {
                    "description": "RLP_ID is the RLP system identifier for the user.",
                    "type": "string",
                    "example": "RLP67890"
                },
                "rws_membership_id": {
                    "description": "RWS_Membership_ID is the RWS membership ID assigned to this user.",
                    "type": "string",
                    "example": "RWS54321"
                },
                "rws_membership_number": {
                    "description": "RWS_Membership_Number is the numeric membership number in the RWS system.",
                    "type": "integer",
                    "example": 987654
                },
                "session_expiry": {
                    "description": "SessionExpiry is the Unix timestamp (seconds since epoch) when the session token expires.",
                    "type": "integer",
                    "example": 1712345678
                },
                "session_token": {
                    "description": "SessionToken is the login session token issued to the user.",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1..."
                }
            }
        },
        "requests.VerifyUserExistence": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "Email address to check for existing registration.",
                    "type": "string",
                    "example": "user@example.com"
                }
            }
        },
        "responses.AuthResponseData": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "AccessToken is the JWT issued to the client for subsequent requests.\nExample: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "responses.AuthSuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "in: body",
                    "type": "integer",
                    "example": 1000
                },
                "data": {
                    "$ref": "#/definitions/responses.AuthResponseData"
                },
                "message": {
                    "type": "string",
                    "example": "token successfully generated"
                }
            }
        },
        "responses.CachedGrCmsSuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "in: body",
                    "type": "integer",
                    "example": 1002
                },
                "data": {
                    "$ref": "#/definitions/model.GrMember"
                },
                "message": {
                    "type": "string",
                    "example": "cached profile found"
                }
            }
        },
        "responses.CreateSuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "in: body",
                    "type": "integer",
                    "example": 1000
                },
                "data": {
                    "$ref": "#/definitions/model.User"
                },
                "message": {
                    "type": "string",
                    "example": "user created"
                }
            }
        },
        "responses.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Code is your internal API status code, e.g. 1002",
                    "type": "integer",
                    "example": 0
                },
                "data": {
                    "type": "string"
                },
                "message": {
                    "description": "Message is a human‑readable description, e.g. \"invalid json request body\"",
                    "type": "string"
                }
            }
        },
        "responses.GetUserSuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "in: body",
                    "type": "integer",
                    "example": 1002
                },
                "data": {
                    "$ref": "#/definitions/model.User"
                },
                "message": {
                    "type": "string",
                    "example": "user found"
                }
            }
        },
        "responses.GrCmsExistenceSuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "in: body",
                    "type": "integer",
                    "example": 1003
                },
                "data": {
                    "$ref": "#/definitions/model.GrMember"
                },
                "message": {
                    "type": "string",
                    "example": "email not found"
                }
            }
        },
        "responses.GrExistenceSuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "in: body",
                    "type": "integer",
                    "example": 1000
                },
                "data": {
                    "$ref": "#/definitions/model.GrMember"
                },
                "message": {
                    "type": "string",
                    "example": "successful"
                }
            }
        },
        "responses.LoginResponseData": {
            "type": "object",
            "properties": {
                "login_session_token": {
                    "description": "LoginSessionToken is the JWT issued after successful authentication.\nexample: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "login_session_token_expiry": {
                    "description": "LoginSessionTokenExpiry is the Unix timestamp (seconds since epoch) when the token expires.\nexample: 1744176000",
                    "type": "integer",
                    "example": 1744176000
                },
                "otp": {
                    "description": "Otp is the one‑time password sent to the user.\nexample: \"123456\"",
                    "type": "string",
                    "example": "123456"
                },
                "otp_expiry": {
                    "description": "OtpExpiry is the Unix timestamp (seconds since epoch) when the OTP expires.\nexample: 1744176000",
                    "type": "integer",
                    "example": 1744176000
                }
            }
        },
        "responses.LoginSuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "in: body",
                    "type": "integer",
                    "example": 1000
                },
                "data": {
                    "$ref": "#/definitions/responses.LoginResponseData"
                },
                "message": {
                    "type": "string",
                    "example": "login successful"
                }
            }
        },
        "responses.RegisterSuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "in: body",
                    "type": "integer",
                    "example": 1000
                },
                "data": {
                    "$ref": "#/definitions/model.Otp"
                },
                "message": {
                    "type": "string",
                    "example": "email not found"
                }
            }
        },
        "responses.UpdateUserSuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "in: body",
                    "type": "integer",
                    "example": 1000
                },
                "data": {
                    "$ref": "#/definitions/model.User"
                },
                "message": {
                    "type": "string",
                    "example": "update successful"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Type \"Bearer \u003cyour-jwt\u003e\" to authorize",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}